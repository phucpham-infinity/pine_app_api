"use strict";var t=require("express"),e=require("cors"),s=require("helmet"),o=require("morgan"),r=require("dotenv"),n=require("mongoose"),a=require("jsonwebtoken"),i=require("zod"),u=require("bcryptjs"),c=require("lodash"),d=require("path");function p(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(s){if("default"!==s){var o=Object.getOwnPropertyDescriptor(t,s);Object.defineProperty(e,s,o.get?o:{enumerable:!0,get:function(){return t[s]}})}})),e.default=t,Object.freeze(e)}p(r).config();const l=t=>{var e;return null===(e=process.env)||void 0===e?void 0:e[t]},y=t=>new n.Schema({...t,createdAt:{type:Date,default:new Date},updatedAt:{type:Date,default:new Date}}),m=t=>(e,s,o)=>{try{t.parse({body:e.body,query:e.query,params:e.params}),o()}catch(t){return s.status(400).json({status:400,error:t.issues})}},g=(t,e,s)=>{var o;const r=null===(o=t.header("Authorization"))||void 0===o?void 0:o.replace("Bearer ","");if(!r)return e.status(403).json({status:403,error:"A token is required for authentication"});try{const e=a.verify(r,process.env.TOKEN_SECRET||"MICRO_APP");t.user=e}catch(t){return e.status(401).json({status:401,error:"Invalid Token"})}return s()},b=i.z.object({body:i.z.object({phone:i.z.string(),password:i.z.string(),isUseTouchId:i.z.boolean().default(!1),isUseFaceId:i.z.boolean().default(!1)})}),f=i.z.object({body:i.z.object({phone:i.z.string(),isUseTouchId:i.z.boolean().default(!1),isUseFaceId:i.z.boolean().default(!1)})}),h=i.z.object({body:i.z.object({phone:i.z.string(),password:i.z.string()})}),j=y({phone:{type:String,required:!0,unique:!0},isUseFaceId:{type:Boolean,required:!1},isUseTouchId:{type:Boolean,required:!1},password:{type:String,required:!0},profile:{type:n.Types.ObjectId,ref:"Profile"}});j.method("doc",(function(){return c.omit(this._doc,["password","__v"])})),j.pre("save",(function(t){var e=this;if(!e.isModified("password"))return t();u.genSalt(10,(function(s,o){if(s)return t(s);u.hash(e.password,o,(function(s,o){if(s)return t(s);e.password=o,t()}))}))})),j.method("comparePassword",(function(t,e){u.compare(t,this.password,(function(t,s){if(t)return e(t,!1);e(null,s)}))})),j.method("generateToken",(function(){return a.sign(this.doc(),process.env.MICRO_APP||"MICRO_APP",{expiresIn:"30d"})}));var z=n.model("User",j);const N="/user/register",q="/user/login-with-phone",w="/user/me",v="/user/update-by-phone",O="/user/phone/:phone",I=t.Router();I.route(N).post([m(b),async(t,e)=>{const{phone:s,password:o,isUseFaceId:r=!1,isUseTouchId:n=!1}=t.body,a=new z({password:o,phone:s,isUseFaceId:r,isUseTouchId:n});try{const t=await a.save();return e.status(200).json({status:"ok",data:t.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),I.route(q).post([m(h),async(t,e)=>{const{password:s,phone:o}=(null==t?void 0:t.body)||{};try{const t=await z.findOne({phone:o});if(!t)return e.status(400).json({status:400,error:"User not found!"});t.comparePassword(s,((s,o)=>s?e.status(400).json({status:400,error:s.message}):o?e.status(200).json({status:"ok",data:{...t.doc(),token:t.generateToken()}}):e.status(400).json({status:400,error:"Password not match!"})))}catch(t){return e.status(400).json({status:400,error:t})}}]),I.route(w).get([g,async(t,e)=>{const{user:s}=t,o=await z.aggregate([{$lookup:{from:"profiles",localField:"_id",foreignField:"user",as:"profile"}},{$unwind:{path:"$profile",preserveNullAndEmptyArrays:!0}},{$lookup:{from:"companies",localField:"profile.company",foreignField:"_id",as:"profile.company"}},{$unwind:{path:"$profile.company",preserveNullAndEmptyArrays:!0}},{$lookup:{from:"rates",localField:"profile.rate",foreignField:"_id",as:"profile.rate"}},{$unwind:{path:"$profile.rate",preserveNullAndEmptyArrays:!0}},{$lookup:{from:"accounts",localField:"user.phone",foreignField:"phone",as:"accounts"}},{$unwind:{path:"$profile.rate",preserveNullAndEmptyArrays:!0}},{$match:{phone:s.phone}}]);return o?e.status(200).json({status:"ok",data:c.omit(null==o?void 0:o[0],["password","__v"])}):e.status(400).json({status:400,error:"User not found!"})}]),I.route(O).get([async(t,e)=>{const{phone:s}=t.params||{};try{const t=await z.findOne({phone:s});return t?e.status(200).json({status:"ok",data:null==t?void 0:t.doc()}):e.status(400).json({status:400,error:"User not found!"})}catch(t){return e.status(400).json({status:400,error:t})}}]),I.route(v).post([m(f),async(t,e)=>{const{isUseFaceId:s,isUseTouchId:o,phone:r}=t.body;try{const t=await z.findOneAndUpdate({phone:r},{$set:{isUseFaceId:s,isUseTouchId:o}},{new:!0});return t||e.status(400).json({status:400,error:"User not found!"}),e.status(200).json({status:"ok",data:null==t?void 0:t.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]);const _=t.Router();_.route("/ping").get(((t,e)=>{e.json({data:"pong",env:l("DB_URL")})}));const k=i.z.object({body:i.z.object({businessActivity:i.z.string(),companyName:i.z.string(),email:i.z.string(),legalType:i.z.string(),numberOfEmployees:i.z.number()})}),D=y({companyName:{type:String,required:!0,unique:!0},email:{type:String,required:!0,unique:!0},businessActivity:{type:String,required:!0},legalType:{type:String,required:!0},numberOfEmployees:{type:Number,required:!0}});D.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var S=n.model("Company",D);const A="/company",E=t.Router();E.use(A,[m(k)]).route(A).post((async(t,e)=>{const{businessActivity:s,companyName:o,email:r,legalType:n,numberOfEmployees:a}=t.body,i=new S({businessActivity:s,companyName:o,email:r,legalType:n,numberOfEmployees:a});try{const t=await i.save();return e.status(200).json({status:"ok",data:t.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}));const P=i.z.object({body:i.z.object({phone:i.z.string(),firstName:i.z.string(),lastName:i.z.string(),nationality:i.z.string(),IDNumber:i.z.string().optional(),passportNumber:i.z.string().optional(),issueDate:i.z.string().optional(),expiryDate:i.z.string().optional(),companyId:i.z.string().optional()})}),R=i.z.object({body:i.z.object({firstName:i.z.string().optional(),lastName:i.z.string().optional(),nationality:i.z.string().optional(),IDNumber:i.z.string().optional(),passportNumber:i.z.string().optional(),issueDate:i.z.string().optional(),expiryDate:i.z.string().optional(),companyName:i.z.string().optional(),phone:i.z.string()})}),U=y({firstName:{type:String,required:!0},lastName:{type:String,required:!0},nationality:{type:String,required:!0},IDNumber:{type:String,required:!1},passportNumber:{type:String,required:!1},issueDate:{type:Date,required:!1},expiryDate:{type:Date,required:!1},company:{type:n.Types.ObjectId,ref:"Company",required:!1},rate:{type:n.Types.ObjectId,ref:"Company",required:!1},user:{type:n.Types.ObjectId,ref:"User",required:!0,unique:!0}});U.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var T=n.model("Profile",U);const $="/profile",x="/profile",F=t.Router();F.route($).post([g,m(P),async(t,e)=>{const{IDNumber:s,firstName:o,expiryDate:r,issueDate:n,lastName:a,nationality:i,passportNumber:u,phone:c,companyName:d}=t.body;try{const t=await z.findOne({phone:c});if(!t)return e.status(400).json({status:400,error:"User not found!"});let p={};d&&(p=await S.findOne({companyName:d}));const l=new T({user:null==t?void 0:t.id,company:null==p?void 0:p.id,IDNumber:s,firstName:o,expiryDate:r,issueDate:n,lastName:a,nationality:i,passportNumber:u}),y=await l.save();return e.status(200).json({status:"ok",data:y.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),F.route(x).put([g,m(R),async(t,e)=>{const{IDNumber:s,firstName:o,expiryDate:r,issueDate:n,lastName:a,nationality:i,passportNumber:u,phone:c,companyName:d}=t.body;try{const t=await z.findOne({phone:c});if(!t)return e.status(400).json({status:400,error:"User not found!"});let p={};if(d&&(p=await S.findOne({companyName:d}),!p))return e.status(400).json({status:400,error:"Company not found"});const l=await T.findOneAndUpdate({user:t.id},{$set:{IDNumber:s,firstName:o,expiryDate:r,issueDate:n,lastName:a,nationality:i,passportNumber:u,company:null==p?void 0:p.id}},{new:!0});return e.status(200).json({status:"ok",data:null==l?void 0:l.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]);const C=t.Router();C.route("/analytics/summary").get(((t,e)=>e.json({status:"ok",data:{income:12e3,expenses:8e3,account_balances:[{account_id:"12345",balance:"15000"},{account_id:"67890",balance:"5000"}]}}))),C.route("/analytics/income-expense").get(((t,e)=>e.json({status:"ok",data:{income:[{category:"Sales",amount:1e4,subcategories:[{subcategory:"Product A",amount:6e3},{subcategory:"Product B",amount:4e3}]},{category:"Investments",amount:2e3}],expenses:[{category:"Salaries",amount:5e3},{category:"Rent",amount:3e3},{category:"Utilities",amount:1e3}]}})));const B=i.z.object({body:i.z.object({companyName:i.z.string(),licenseNo:i.z.string(),registerNo:i.z.string(),companyEmail:i.z.string(),userEmail:i.z.string()})});i.z.object({body:i.z.object({companyName:i.z.string().optional(),licenseNo:i.z.string().optional(),registerNo:i.z.string().optional(),companyEmail:i.z.string().optional(),userEmail:i.z.string().optional()})});const L=y({companyName:{type:String,required:!0},licenseNo:{type:String,required:!0},registerNo:{type:String,required:!0},companyEmail:{type:String,required:!0},userEmail:{type:String,required:!0,unique:!0},status:{type:String,enum:["PENDING","APPROVAL","REJECT"],default:"PENDING"}});L.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var M=n.model("RequestCompany",L);const G="/request-company",V="/request-company/approval",J="/request-company",K=t.Router();K.route(G).post([m(B),async(t,e)=>{const{companyName:s,companyEmail:o,licenseNo:r,registerNo:n,userEmail:a}=t.body,i=new M({companyName:s,companyEmail:o,licenseNo:r,registerNo:n,userEmail:a});try{const t=await i.save();return e.status(200).json({status:"ok",data:t.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),K.route(V).put([g,async(t,e)=>{const{email:s}=t.query||{};console.log("email",s);try{const t=await M.findOneAndUpdate({userEmail:s},{$set:{status:"APPROVAL"}},{new:!0});return e.status(200).json({status:"ok",data:t})}catch(t){return e.status(400).json({status:400,error:t})}}]),K.route(J).get([g,async(t,e)=>{const s=c.pick(t.query,["status"]);try{const t=await M.find(s);return e.status(200).json({status:"ok",data:t})}catch(t){return e.status(400).json({status:400,error:t})}}]);const H=i.z.object({body:i.z.object({name:i.z.string(),fee:i.z.string(),transactions:i.z.string(),atmDeposits:i.z.string(),addOns:i.z.string(),books:i.z.string()})}),Q=i.z.object({body:i.z.object({name:i.z.string().optional(),fee:i.z.string().optional(),transactions:i.z.string().optional(),atmDeposits:i.z.string().optional(),addOns:i.z.string().optional(),books:i.z.string().optional()})}),W=y({name:{type:String,required:!0,unique:!0},fee:{type:String,required:!0},transactions:{type:String,required:!0},atmDeposits:{type:String,required:!0},addOns:{type:String,required:!0},books:{type:String,required:!0}});W.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var X=n.model("Rate",W);const Y="/rate",Z="/rate",tt="/rate",et="/rate/join",st=t.Router();st.route(tt).get([g,async(t,e)=>{try{const t=await X.find();return e.status(200).json({status:"ok",data:t})}catch(t){return e.status(400).json({status:400,error:t})}}]),st.route(et).post([g,async(t,e)=>{const{rateName:s}=t.query||{},{_id:o}=t.user||{};console.log(s,o);try{const t=await X.findOne({name:s});if(console.log(null==t?void 0:t.id),!t)return e.status(400).json({status:400,error:new Error("Rate not found")});const r=await T.findOneAndUpdate({user:o},{$set:{rate:null==t?void 0:t.id}},{new:!0});return e.status(200).json({status:"ok",data:null==r?void 0:r.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),st.route(Y).post([g,m(H),async(t,e)=>{const{name:s,fee:o,transactions:r,atmDeposits:n,addOns:a,books:i}=t.body;try{const t=new X({name:s,fee:o,transactions:r,atmDeposits:n,addOns:a,books:i}),u=await t.save();return e.status(200).json({status:"ok",data:u.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),st.route(Z).put([g,m(Q),async(t,e)=>{t.body;try{const t=new X({}),s=await t.save();return e.status(200).json({status:"ok",data:s.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]);const ot=t.Router();ot.route("/request-delivery").post([(t,e)=>e.status(200).json({status:"ok",data:t.body})]);const rt=i.z.object({body:i.z.object({userId:i.z.string()})});i.z.object({body:i.z.object({userId:i.z.string().optional()})});const nt=y({user:{type:n.Types.ObjectId,ref:"User",required:!0,unique:!0},status:{type:String,enum:["PENDING","APPROVAL","REJECT"],default:"PENDING"}});nt.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var at=n.model("RequestAccount",nt);const it="/request-account",ut="/request-account/approval",ct="/request-account",dt=t.Router();dt.route(it).post([g,m(rt),async(t,e)=>{const{userId:s,status:o}=t.body,r=new at({status:o,user:s});try{if(!await z.findById(s))return e.status(400).json({status:400,error:"User not found!"});const t=await r.save();return e.status(200).json({status:"ok",data:t.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]),dt.route(ut).put([g,async(t,e)=>{const{userId:s}=t.query||{};try{const t=await at.findOneAndUpdate({user:s},{$set:{status:"APPROVAL"}},{new:!0});return e.status(200).json({status:"ok",data:t})}catch(t){return e.status(400).json({status:400,error:t})}}]),dt.route(ct).get([g,async(t,e)=>{const s=c.pick(t.query,["status"]);try{const t=await at.find(s);return e.status(200).json({status:"ok",data:t})}catch(t){return e.status(400).json({status:400,error:t})}}]);const pt=i.z.object({body:i.z.object({accountName:i.z.string(),accountNumber:i.z.string(),iban:i.z.string(),swiftCode:i.z.string()})}),lt=y({accountName:{type:String,required:!0,unique:!0},accountNumber:{type:String,required:!0,unique:!0},iban:{type:String,required:!0,unique:!0},swiftCode:{type:String,required:!0},phone:{type:String,required:!0}});lt.method("doc",(function(){return c.omit(this._doc,["password","__v"])}));var yt=n.model("Account",lt);const mt=t.Router();mt.route("/account").post([g,m(pt),async(t,e)=>{const{accountName:s,accountNumber:o,iban:r,swiftCode:n}=t.body,{user:a}=t||{};try{const t=new yt({accountName:s,accountNumber:o,iban:r,swiftCode:n,phone:a.phone}),i=await t.save();return e.status(200).json({status:"ok",data:i.doc()})}catch(t){return e.status(400).json({status:400,error:t})}}]);const gt=+l("PORT"),bt=l("DB_URL");gt&&bt||(console.error("Missing env!"),process.exit(1));const ft=t();ft.use(o("combined")),ft.use(s({contentSecurityPolicy:!1,frameguard:!1,crossOriginEmbedderPolicy:!1,crossOriginOpenerPolicy:!1,crossOriginResourcePolicy:!1})),ft.use(e({origin:"*"})),ft.use(t.json()),ft.use(t.urlencoded({extended:!1})),ft.use(t.static(d.join(__dirname+"/public"))),ft.use("/api",[_,I,E,F,C,K,st,ot,dt,mt]),ft.get("*",(async(t,e)=>e.sendFile(d.join(__dirname+"/public/index.html")))),ft.listen(gt,(()=>{console.log(`Server started on port ${gt}: http://localhost:${gt}`),(({db:t})=>{const e=()=>{n.connect(t,{dbName:"pina_app"}).then((t=>console.info(`Successfully connected to ${t.connection.name}`))).catch((t=>(console.error("Error connecting to database: ",t),process.exit(1))))};e(),n.connection.on("disconnected",e)})({db:bt})})).on("error",(t=>{console.log("ERROR: ",t)})),exports.app=ft;
